<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茶瓜客</title>
  
  <subtitle>解衣又作茶瓜客，倚槛同看烟雨峰</subtitle>
  <link href="https://www.chaguake.com/atom.xml" rel="self"/>
  
  <link href="https://www.chaguake.com/"/>
  <updated>2021-03-14T07:05:10.966Z</updated>
  <id>https://www.chaguake.com/</id>
  
  <author>
    <name>茶瓜客</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++多态之虚函数与虚函数表</title>
    <link href="https://www.chaguake.com/2021/03/14/virtual_function_or_table_of_polymorphism/"/>
    <id>https://www.chaguake.com/2021/03/14/virtual_function_or_table_of_polymorphism/</id>
    <published>2021-03-13T16:00:00.000Z</published>
    <updated>2021-03-14T07:05:10.966Z</updated>
    
    <content type="html"><![CDATA[<p>虚函数，是用关键字<code>virtual</code>修饰的<strong>类成员函数</strong>，但不包括静态函数（static）和构造函数。</p><p>内联函数（inline）可以是虚函数。因为内联函数是作用于编译期间，用于通知编译器是否要将内联函数展开。当虚函数标记为内联函数时，假如该函数呈现运行时多态，那么编译器会忽略关键字<code>inline</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Base&#123;</span><br><span class="line">public:</span><br><span class="line">    Base();</span><br><span class="line">    ~Base();</span><br><span class="line"></span><br><span class="line">    virtual void fun1();</span><br><span class="line">    virtual void fun2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Device:public Base&#123;</span><br><span class="line">public:</span><br><span class="line">    Device();</span><br><span class="line">    virtual ~Device();&#x2F;&#x2F;确保Device类正常析构</span><br><span class="line"></span><br><span class="line">    virtual void fun1();</span><br><span class="line">    void fun2();&#x2F;&#x2F;不加关键字virtual也可以</span><br><span class="line">    virtual void print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Device dev;</span><br><span class="line">&#x2F;&#x2F;dev.fun1();</span><br><span class="line">&#x2F;&#x2F;dev.fun2();</span><br></pre></td></tr></table></figure><p>运行上面代码，可以发现，对象<code>dev</code>有一个指针对象<code>__vfptr</code>。</p><p><img src="20210314133118453_13507.png" alt="图1"></p><p>指针对象<code>__vfptr</code>是虚函数指针，类型为<code>void(*)()</code>，它指向对象<code>dev</code>的数组<code>vftable</code>，即虚函数表。</p><p>定义另一个Device类对象，可以看到，两个Device类对象的指针对象<code>__vfptr</code>的地址是一样的，这就意味着，Device类的虚函数表全局只有一份，所有Device类对象都会创建一个虚函数指针，并指向它。</p><p>在Device类中定义虚函数<code>print</code>，会发现在<code>__vfptr</code>中并没有发现它，但<code>vftable</code>大小+1，派生另一个类，继承于Device类，其<code>__vfptr</code>和<code>vftable</code>跟Device类一样。</p><p>这就说明，继承于Base类，但属于其子类的虚函数都会按顺序写入基类的<code>vftable</code>里。（假如有多继承，那属于其子类的虚函数都会按顺序写入第一个基类的<code>vftable</code>里。）</p><p>那假如基类并没有虚函数呢？</p><p><img src="20210314135804590_12114.png" alt="图2"></p><p>可以看出，<code>vftable</code>会挂在基类的下一级子类中（或者再下一级）。</p><hr><p>其他博客的相关文章：<a href="https://blog.twofei.com/496/">C++中的虚函数(表)实现机制以及用C语言对其进行的模拟实现</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虚函数，是用关键字&lt;code&gt;virtual&lt;/code&gt;修饰的&lt;strong&gt;类成员函数&lt;/strong&gt;，但不包括静态函数（static）和构造函数。&lt;/p&gt;
&lt;p&gt;内联函数（inline）可以是虚函数。因为内联函数是作用于编译期间，用于通知编译器是否要将内联函数展开。</summary>
      
    
    
    
    <category term="C/C++" scheme="https://www.chaguake.com/categories/C-C/"/>
    
    
    <category term="C++知识" scheme="https://www.chaguake.com/tags/C-%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
